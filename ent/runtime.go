// Code generated by ent, DO NOT EDIT.

package ent

import (
	"nebula-live/ent/permission"
	"nebula-live/ent/role"
	"nebula-live/ent/rolepermission"
	"nebula-live/ent/schema"
	"nebula-live/ent/user"
	"nebula-live/ent/userrole"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	permissionFields := schema.Permission{}.Fields()
	_ = permissionFields
	// permissionDescName is the schema descriptor for name field.
	permissionDescName := permissionFields[1].Descriptor()
	// permission.NameValidator is a validator for the "name" field. It is called by the builders before save.
	permission.NameValidator = func() func(string) error {
		validators := permissionDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// permissionDescDisplayName is the schema descriptor for display_name field.
	permissionDescDisplayName := permissionFields[2].Descriptor()
	// permission.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	permission.DisplayNameValidator = func() func(string) error {
		validators := permissionDescDisplayName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(display_name string) error {
			for _, fn := range fns {
				if err := fn(display_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// permissionDescDescription is the schema descriptor for description field.
	permissionDescDescription := permissionFields[3].Descriptor()
	// permission.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	permission.DescriptionValidator = permissionDescDescription.Validators[0].(func(string) error)
	// permissionDescResource is the schema descriptor for resource field.
	permissionDescResource := permissionFields[4].Descriptor()
	// permission.ResourceValidator is a validator for the "resource" field. It is called by the builders before save.
	permission.ResourceValidator = func() func(string) error {
		validators := permissionDescResource.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(resource string) error {
			for _, fn := range fns {
				if err := fn(resource); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// permissionDescAction is the schema descriptor for action field.
	permissionDescAction := permissionFields[5].Descriptor()
	// permission.ActionValidator is a validator for the "action" field. It is called by the builders before save.
	permission.ActionValidator = func() func(string) error {
		validators := permissionDescAction.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(action string) error {
			for _, fn := range fns {
				if err := fn(action); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// permissionDescIsSystem is the schema descriptor for is_system field.
	permissionDescIsSystem := permissionFields[6].Descriptor()
	// permission.DefaultIsSystem holds the default value on creation for the is_system field.
	permission.DefaultIsSystem = permissionDescIsSystem.Default.(bool)
	// permissionDescCreatedAt is the schema descriptor for created_at field.
	permissionDescCreatedAt := permissionFields[7].Descriptor()
	// permission.DefaultCreatedAt holds the default value on creation for the created_at field.
	permission.DefaultCreatedAt = permissionDescCreatedAt.Default.(func() time.Time)
	// permissionDescUpdatedAt is the schema descriptor for updated_at field.
	permissionDescUpdatedAt := permissionFields[8].Descriptor()
	// permission.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	permission.DefaultUpdatedAt = permissionDescUpdatedAt.Default.(func() time.Time)
	// permission.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	permission.UpdateDefaultUpdatedAt = permissionDescUpdatedAt.UpdateDefault.(func() time.Time)
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescName is the schema descriptor for name field.
	roleDescName := roleFields[1].Descriptor()
	// role.NameValidator is a validator for the "name" field. It is called by the builders before save.
	role.NameValidator = func() func(string) error {
		validators := roleDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// roleDescDisplayName is the schema descriptor for display_name field.
	roleDescDisplayName := roleFields[2].Descriptor()
	// role.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	role.DisplayNameValidator = func() func(string) error {
		validators := roleDescDisplayName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(display_name string) error {
			for _, fn := range fns {
				if err := fn(display_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// roleDescDescription is the schema descriptor for description field.
	roleDescDescription := roleFields[3].Descriptor()
	// role.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	role.DescriptionValidator = roleDescDescription.Validators[0].(func(string) error)
	// roleDescIsSystem is the schema descriptor for is_system field.
	roleDescIsSystem := roleFields[4].Descriptor()
	// role.DefaultIsSystem holds the default value on creation for the is_system field.
	role.DefaultIsSystem = roleDescIsSystem.Default.(bool)
	// roleDescCreatedAt is the schema descriptor for created_at field.
	roleDescCreatedAt := roleFields[5].Descriptor()
	// role.DefaultCreatedAt holds the default value on creation for the created_at field.
	role.DefaultCreatedAt = roleDescCreatedAt.Default.(func() time.Time)
	// roleDescUpdatedAt is the schema descriptor for updated_at field.
	roleDescUpdatedAt := roleFields[6].Descriptor()
	// role.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	role.DefaultUpdatedAt = roleDescUpdatedAt.Default.(func() time.Time)
	// role.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	role.UpdateDefaultUpdatedAt = roleDescUpdatedAt.UpdateDefault.(func() time.Time)
	rolepermissionFields := schema.RolePermission{}.Fields()
	_ = rolepermissionFields
	// rolepermissionDescAssignedAt is the schema descriptor for assigned_at field.
	rolepermissionDescAssignedAt := rolepermissionFields[4].Descriptor()
	// rolepermission.DefaultAssignedAt holds the default value on creation for the assigned_at field.
	rolepermission.DefaultAssignedAt = rolepermissionDescAssignedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescNickname is the schema descriptor for nickname field.
	userDescNickname := userFields[4].Descriptor()
	// user.NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	user.NicknameValidator = userDescNickname.Validators[0].(func(string) error)
	// userDescAvatar is the schema descriptor for avatar field.
	userDescAvatar := userFields[5].Descriptor()
	// user.AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	user.AvatarValidator = userDescAvatar.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[7].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[8].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	userroleFields := schema.UserRole{}.Fields()
	_ = userroleFields
	// userroleDescAssignedAt is the schema descriptor for assigned_at field.
	userroleDescAssignedAt := userroleFields[4].Descriptor()
	// userrole.DefaultAssignedAt holds the default value on creation for the assigned_at field.
	userrole.DefaultAssignedAt = userroleDescAssignedAt.Default.(func() time.Time)
}
