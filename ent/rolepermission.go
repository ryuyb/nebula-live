// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"nebula-live/ent/permission"
	"nebula-live/ent/role"
	"nebula-live/ent/rolepermission"
	"nebula-live/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RolePermission is the model entity for the RolePermission schema.
type RolePermission struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// 角色ID
	RoleID uint `json:"role_id,omitempty"`
	// 权限ID
	PermissionID uint `json:"permission_id,omitempty"`
	// 分配者的用户ID
	AssignedBy uint `json:"assigned_by,omitempty"`
	// 分配时间
	AssignedAt time.Time `json:"assigned_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RolePermissionQuery when eager-loading is set.
	Edges        RolePermissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RolePermissionEdges holds the relations/edges for other nodes in the graph.
type RolePermissionEdges struct {
	// Role holds the value of the role edge.
	Role *Role `json:"role,omitempty"`
	// Permission holds the value of the permission edge.
	Permission *Permission `json:"permission,omitempty"`
	// Assigner holds the value of the assigner edge.
	Assigner *User `json:"assigner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RolePermissionEdges) RoleOrErr() (*Role, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: role.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// PermissionOrErr returns the Permission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RolePermissionEdges) PermissionOrErr() (*Permission, error) {
	if e.Permission != nil {
		return e.Permission, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: permission.Label}
	}
	return nil, &NotLoadedError{edge: "permission"}
}

// AssignerOrErr returns the Assigner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RolePermissionEdges) AssignerOrErr() (*User, error) {
	if e.Assigner != nil {
		return e.Assigner, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "assigner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RolePermission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rolepermission.FieldID, rolepermission.FieldRoleID, rolepermission.FieldPermissionID, rolepermission.FieldAssignedBy:
			values[i] = new(sql.NullInt64)
		case rolepermission.FieldAssignedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RolePermission fields.
func (_m *RolePermission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rolepermission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint(value.Int64)
		case rolepermission.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				_m.RoleID = uint(value.Int64)
			}
		case rolepermission.FieldPermissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field permission_id", values[i])
			} else if value.Valid {
				_m.PermissionID = uint(value.Int64)
			}
		case rolepermission.FieldAssignedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_by", values[i])
			} else if value.Valid {
				_m.AssignedBy = uint(value.Int64)
			}
		case rolepermission.FieldAssignedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_at", values[i])
			} else if value.Valid {
				_m.AssignedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RolePermission.
// This includes values selected through modifiers, order, etc.
func (_m *RolePermission) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryRole queries the "role" edge of the RolePermission entity.
func (_m *RolePermission) QueryRole() *RoleQuery {
	return NewRolePermissionClient(_m.config).QueryRole(_m)
}

// QueryPermission queries the "permission" edge of the RolePermission entity.
func (_m *RolePermission) QueryPermission() *PermissionQuery {
	return NewRolePermissionClient(_m.config).QueryPermission(_m)
}

// QueryAssigner queries the "assigner" edge of the RolePermission entity.
func (_m *RolePermission) QueryAssigner() *UserQuery {
	return NewRolePermissionClient(_m.config).QueryAssigner(_m)
}

// Update returns a builder for updating this RolePermission.
// Note that you need to call RolePermission.Unwrap() before calling this method if this RolePermission
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *RolePermission) Update() *RolePermissionUpdateOne {
	return NewRolePermissionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the RolePermission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *RolePermission) Unwrap() *RolePermission {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: RolePermission is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *RolePermission) String() string {
	var builder strings.Builder
	builder.WriteString("RolePermission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.RoleID))
	builder.WriteString(", ")
	builder.WriteString("permission_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.PermissionID))
	builder.WriteString(", ")
	builder.WriteString("assigned_by=")
	builder.WriteString(fmt.Sprintf("%v", _m.AssignedBy))
	builder.WriteString(", ")
	builder.WriteString("assigned_at=")
	builder.WriteString(_m.AssignedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RolePermissions is a parsable slice of RolePermission.
type RolePermissions []*RolePermission
