// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nebula-live/ent/predicate"
	"nebula-live/ent/user"
	"nebula-live/ent/userpushsetting"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPushSettingUpdate is the builder for updating UserPushSetting entities.
type UserPushSettingUpdate struct {
	config
	hooks    []Hook
	mutation *UserPushSettingMutation
}

// Where appends a list predicates to the UserPushSettingUpdate builder.
func (_u *UserPushSettingUpdate) Where(ps ...predicate.UserPushSetting) *UserPushSettingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *UserPushSettingUpdate) SetUserID(v uint) *UserPushSettingUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserPushSettingUpdate) SetNillableUserID(v *uint) *UserPushSettingUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetProvider sets the "provider" field.
func (_u *UserPushSettingUpdate) SetProvider(v userpushsetting.Provider) *UserPushSettingUpdate {
	_u.mutation.SetProvider(v)
	return _u
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (_u *UserPushSettingUpdate) SetNillableProvider(v *userpushsetting.Provider) *UserPushSettingUpdate {
	if v != nil {
		_u.SetProvider(*v)
	}
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *UserPushSettingUpdate) SetEnabled(v bool) *UserPushSettingUpdate {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *UserPushSettingUpdate) SetNillableEnabled(v *bool) *UserPushSettingUpdate {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetDeviceID sets the "device_id" field.
func (_u *UserPushSettingUpdate) SetDeviceID(v string) *UserPushSettingUpdate {
	_u.mutation.SetDeviceID(v)
	return _u
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (_u *UserPushSettingUpdate) SetNillableDeviceID(v *string) *UserPushSettingUpdate {
	if v != nil {
		_u.SetDeviceID(*v)
	}
	return _u
}

// SetDeviceName sets the "device_name" field.
func (_u *UserPushSettingUpdate) SetDeviceName(v string) *UserPushSettingUpdate {
	_u.mutation.SetDeviceName(v)
	return _u
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (_u *UserPushSettingUpdate) SetNillableDeviceName(v *string) *UserPushSettingUpdate {
	if v != nil {
		_u.SetDeviceName(*v)
	}
	return _u
}

// ClearDeviceName clears the value of the "device_name" field.
func (_u *UserPushSettingUpdate) ClearDeviceName() *UserPushSettingUpdate {
	_u.mutation.ClearDeviceName()
	return _u
}

// SetSettings sets the "settings" field.
func (_u *UserPushSettingUpdate) SetSettings(v map[string]interface{}) *UserPushSettingUpdate {
	_u.mutation.SetSettings(v)
	return _u
}

// ClearSettings clears the value of the "settings" field.
func (_u *UserPushSettingUpdate) ClearSettings() *UserPushSettingUpdate {
	_u.mutation.ClearSettings()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserPushSettingUpdate) SetUpdatedAt(v time.Time) *UserPushSettingUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserPushSettingUpdate) SetUser(v *User) *UserPushSettingUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the UserPushSettingMutation object of the builder.
func (_u *UserPushSettingUpdate) Mutation() *UserPushSettingMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserPushSettingUpdate) ClearUser() *UserPushSettingUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserPushSettingUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserPushSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserPushSettingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserPushSettingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserPushSettingUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := userpushsetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserPushSettingUpdate) check() error {
	if v, ok := _u.mutation.Provider(); ok {
		if err := userpushsetting.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "UserPushSetting.provider": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DeviceID(); ok {
		if err := userpushsetting.DeviceIDValidator(v); err != nil {
			return &ValidationError{Name: "device_id", err: fmt.Errorf(`ent: validator failed for field "UserPushSetting.device_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DeviceName(); ok {
		if err := userpushsetting.DeviceNameValidator(v); err != nil {
			return &ValidationError{Name: "device_name", err: fmt.Errorf(`ent: validator failed for field "UserPushSetting.device_name": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPushSetting.user"`)
	}
	return nil
}

func (_u *UserPushSettingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpushsetting.Table, userpushsetting.Columns, sqlgraph.NewFieldSpec(userpushsetting.FieldID, field.TypeUint))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Provider(); ok {
		_spec.SetField(userpushsetting.FieldProvider, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(userpushsetting.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DeviceID(); ok {
		_spec.SetField(userpushsetting.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.DeviceName(); ok {
		_spec.SetField(userpushsetting.FieldDeviceName, field.TypeString, value)
	}
	if _u.mutation.DeviceNameCleared() {
		_spec.ClearField(userpushsetting.FieldDeviceName, field.TypeString)
	}
	if value, ok := _u.mutation.Settings(); ok {
		_spec.SetField(userpushsetting.FieldSettings, field.TypeJSON, value)
	}
	if _u.mutation.SettingsCleared() {
		_spec.ClearField(userpushsetting.FieldSettings, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(userpushsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpushsetting.UserTable,
			Columns: []string{userpushsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpushsetting.UserTable,
			Columns: []string{userpushsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpushsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserPushSettingUpdateOne is the builder for updating a single UserPushSetting entity.
type UserPushSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPushSettingMutation
}

// SetUserID sets the "user_id" field.
func (_u *UserPushSettingUpdateOne) SetUserID(v uint) *UserPushSettingUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserPushSettingUpdateOne) SetNillableUserID(v *uint) *UserPushSettingUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetProvider sets the "provider" field.
func (_u *UserPushSettingUpdateOne) SetProvider(v userpushsetting.Provider) *UserPushSettingUpdateOne {
	_u.mutation.SetProvider(v)
	return _u
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (_u *UserPushSettingUpdateOne) SetNillableProvider(v *userpushsetting.Provider) *UserPushSettingUpdateOne {
	if v != nil {
		_u.SetProvider(*v)
	}
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *UserPushSettingUpdateOne) SetEnabled(v bool) *UserPushSettingUpdateOne {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *UserPushSettingUpdateOne) SetNillableEnabled(v *bool) *UserPushSettingUpdateOne {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetDeviceID sets the "device_id" field.
func (_u *UserPushSettingUpdateOne) SetDeviceID(v string) *UserPushSettingUpdateOne {
	_u.mutation.SetDeviceID(v)
	return _u
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (_u *UserPushSettingUpdateOne) SetNillableDeviceID(v *string) *UserPushSettingUpdateOne {
	if v != nil {
		_u.SetDeviceID(*v)
	}
	return _u
}

// SetDeviceName sets the "device_name" field.
func (_u *UserPushSettingUpdateOne) SetDeviceName(v string) *UserPushSettingUpdateOne {
	_u.mutation.SetDeviceName(v)
	return _u
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (_u *UserPushSettingUpdateOne) SetNillableDeviceName(v *string) *UserPushSettingUpdateOne {
	if v != nil {
		_u.SetDeviceName(*v)
	}
	return _u
}

// ClearDeviceName clears the value of the "device_name" field.
func (_u *UserPushSettingUpdateOne) ClearDeviceName() *UserPushSettingUpdateOne {
	_u.mutation.ClearDeviceName()
	return _u
}

// SetSettings sets the "settings" field.
func (_u *UserPushSettingUpdateOne) SetSettings(v map[string]interface{}) *UserPushSettingUpdateOne {
	_u.mutation.SetSettings(v)
	return _u
}

// ClearSettings clears the value of the "settings" field.
func (_u *UserPushSettingUpdateOne) ClearSettings() *UserPushSettingUpdateOne {
	_u.mutation.ClearSettings()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserPushSettingUpdateOne) SetUpdatedAt(v time.Time) *UserPushSettingUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserPushSettingUpdateOne) SetUser(v *User) *UserPushSettingUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the UserPushSettingMutation object of the builder.
func (_u *UserPushSettingUpdateOne) Mutation() *UserPushSettingMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserPushSettingUpdateOne) ClearUser() *UserPushSettingUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the UserPushSettingUpdate builder.
func (_u *UserPushSettingUpdateOne) Where(ps ...predicate.UserPushSetting) *UserPushSettingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserPushSettingUpdateOne) Select(field string, fields ...string) *UserPushSettingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserPushSetting entity.
func (_u *UserPushSettingUpdateOne) Save(ctx context.Context) (*UserPushSetting, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserPushSettingUpdateOne) SaveX(ctx context.Context) *UserPushSetting {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserPushSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserPushSettingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserPushSettingUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := userpushsetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserPushSettingUpdateOne) check() error {
	if v, ok := _u.mutation.Provider(); ok {
		if err := userpushsetting.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "UserPushSetting.provider": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DeviceID(); ok {
		if err := userpushsetting.DeviceIDValidator(v); err != nil {
			return &ValidationError{Name: "device_id", err: fmt.Errorf(`ent: validator failed for field "UserPushSetting.device_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DeviceName(); ok {
		if err := userpushsetting.DeviceNameValidator(v); err != nil {
			return &ValidationError{Name: "device_name", err: fmt.Errorf(`ent: validator failed for field "UserPushSetting.device_name": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPushSetting.user"`)
	}
	return nil
}

func (_u *UserPushSettingUpdateOne) sqlSave(ctx context.Context) (_node *UserPushSetting, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpushsetting.Table, userpushsetting.Columns, sqlgraph.NewFieldSpec(userpushsetting.FieldID, field.TypeUint))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPushSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpushsetting.FieldID)
		for _, f := range fields {
			if !userpushsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpushsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Provider(); ok {
		_spec.SetField(userpushsetting.FieldProvider, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(userpushsetting.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DeviceID(); ok {
		_spec.SetField(userpushsetting.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.DeviceName(); ok {
		_spec.SetField(userpushsetting.FieldDeviceName, field.TypeString, value)
	}
	if _u.mutation.DeviceNameCleared() {
		_spec.ClearField(userpushsetting.FieldDeviceName, field.TypeString)
	}
	if value, ok := _u.mutation.Settings(); ok {
		_spec.SetField(userpushsetting.FieldSettings, field.TypeJSON, value)
	}
	if _u.mutation.SettingsCleared() {
		_spec.ClearField(userpushsetting.FieldSettings, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(userpushsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpushsetting.UserTable,
			Columns: []string{userpushsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpushsetting.UserTable,
			Columns: []string{userpushsetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPushSetting{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpushsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
