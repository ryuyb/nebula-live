// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nebula-live/ent/permission"
	"nebula-live/ent/rolepermission"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PermissionCreate is the builder for creating a Permission entity.
type PermissionCreate struct {
	config
	mutation *PermissionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *PermissionCreate) SetName(v string) *PermissionCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDisplayName sets the "display_name" field.
func (_c *PermissionCreate) SetDisplayName(v string) *PermissionCreate {
	_c.mutation.SetDisplayName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *PermissionCreate) SetDescription(v string) *PermissionCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *PermissionCreate) SetNillableDescription(v *string) *PermissionCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetResource sets the "resource" field.
func (_c *PermissionCreate) SetResource(v string) *PermissionCreate {
	_c.mutation.SetResource(v)
	return _c
}

// SetAction sets the "action" field.
func (_c *PermissionCreate) SetAction(v string) *PermissionCreate {
	_c.mutation.SetAction(v)
	return _c
}

// SetIsSystem sets the "is_system" field.
func (_c *PermissionCreate) SetIsSystem(v bool) *PermissionCreate {
	_c.mutation.SetIsSystem(v)
	return _c
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (_c *PermissionCreate) SetNillableIsSystem(v *bool) *PermissionCreate {
	if v != nil {
		_c.SetIsSystem(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *PermissionCreate) SetCreatedAt(v time.Time) *PermissionCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PermissionCreate) SetNillableCreatedAt(v *time.Time) *PermissionCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *PermissionCreate) SetUpdatedAt(v time.Time) *PermissionCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *PermissionCreate) SetNillableUpdatedAt(v *time.Time) *PermissionCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *PermissionCreate) SetID(v uint) *PermissionCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddRolePermissionIDs adds the "role_permissions" edge to the RolePermission entity by IDs.
func (_c *PermissionCreate) AddRolePermissionIDs(ids ...uint) *PermissionCreate {
	_c.mutation.AddRolePermissionIDs(ids...)
	return _c
}

// AddRolePermissions adds the "role_permissions" edges to the RolePermission entity.
func (_c *PermissionCreate) AddRolePermissions(v ...*RolePermission) *PermissionCreate {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRolePermissionIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (_c *PermissionCreate) Mutation() *PermissionMutation {
	return _c.mutation
}

// Save creates the Permission in the database.
func (_c *PermissionCreate) Save(ctx context.Context) (*Permission, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PermissionCreate) SaveX(ctx context.Context) *Permission {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PermissionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PermissionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PermissionCreate) defaults() {
	if _, ok := _c.mutation.IsSystem(); !ok {
		v := permission.DefaultIsSystem
		_c.mutation.SetIsSystem(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := permission.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := permission.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PermissionCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Permission.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := permission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Permission.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "Permission.display_name"`)}
	}
	if v, ok := _c.mutation.DisplayName(); ok {
		if err := permission.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "Permission.display_name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Description(); ok {
		if err := permission.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Permission.description": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Resource(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`ent: missing required field "Permission.resource"`)}
	}
	if v, ok := _c.mutation.Resource(); ok {
		if err := permission.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: validator failed for field "Permission.resource": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "Permission.action"`)}
	}
	if v, ok := _c.mutation.Action(); ok {
		if err := permission.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "Permission.action": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsSystem(); !ok {
		return &ValidationError{Name: "is_system", err: errors.New(`ent: missing required field "Permission.is_system"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Permission.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Permission.updated_at"`)}
	}
	return nil
}

func (_c *PermissionCreate) sqlSave(ctx context.Context) (*Permission, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PermissionCreate) createSpec() (*Permission, *sqlgraph.CreateSpec) {
	var (
		_node = &Permission{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(permission.Table, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.DisplayName(); ok {
		_spec.SetField(permission.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Resource(); ok {
		_spec.SetField(permission.FieldResource, field.TypeString, value)
		_node.Resource = value
	}
	if value, ok := _c.mutation.Action(); ok {
		_spec.SetField(permission.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := _c.mutation.IsSystem(); ok {
		_spec.SetField(permission.FieldIsSystem, field.TypeBool, value)
		_node.IsSystem = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(permission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(permission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.RolePermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permission.RolePermissionsTable,
			Columns: []string{permission.RolePermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepermission.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PermissionCreateBulk is the builder for creating many Permission entities in bulk.
type PermissionCreateBulk struct {
	config
	err      error
	builders []*PermissionCreate
}

// Save creates the Permission entities in the database.
func (_c *PermissionCreateBulk) Save(ctx context.Context) ([]*Permission, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Permission, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PermissionCreateBulk) SaveX(ctx context.Context) []*Permission {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PermissionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
