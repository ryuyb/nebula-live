// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"nebula-live/ent/user"
	"nebula-live/ent/userpushsetting"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserPushSetting is the model entity for the UserPushSetting schema.
type UserPushSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// 关联的用户ID
	UserID uint `json:"user_id,omitempty"`
	// 推送服务提供商
	Provider userpushsetting.Provider `json:"provider,omitempty"`
	// 是否启用此推送设置
	Enabled bool `json:"enabled,omitempty"`
	// 设备ID或推送标识符
	DeviceID string `json:"device_id,omitempty"`
	// 设备名称，用于用户识别
	DeviceName string `json:"device_name,omitempty"`
	// 提供商特定的设置，JSON格式存储
	Settings map[string]interface{} `json:"settings,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPushSettingQuery when eager-loading is set.
	Edges        UserPushSettingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserPushSettingEdges holds the relations/edges for other nodes in the graph.
type UserPushSettingEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPushSettingEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPushSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpushsetting.FieldSettings:
			values[i] = new([]byte)
		case userpushsetting.FieldEnabled:
			values[i] = new(sql.NullBool)
		case userpushsetting.FieldID, userpushsetting.FieldUserID:
			values[i] = new(sql.NullInt64)
		case userpushsetting.FieldProvider, userpushsetting.FieldDeviceID, userpushsetting.FieldDeviceName:
			values[i] = new(sql.NullString)
		case userpushsetting.FieldCreatedAt, userpushsetting.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPushSetting fields.
func (_m *UserPushSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpushsetting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint(value.Int64)
		case userpushsetting.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = uint(value.Int64)
			}
		case userpushsetting.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				_m.Provider = userpushsetting.Provider(value.String)
			}
		case userpushsetting.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				_m.Enabled = value.Bool
			}
		case userpushsetting.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				_m.DeviceID = value.String
			}
		case userpushsetting.FieldDeviceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_name", values[i])
			} else if value.Valid {
				_m.DeviceName = value.String
			}
		case userpushsetting.FieldSettings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field settings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Settings); err != nil {
					return fmt.Errorf("unmarshal field settings: %w", err)
				}
			}
		case userpushsetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case userpushsetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserPushSetting.
// This includes values selected through modifiers, order, etc.
func (_m *UserPushSetting) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserPushSetting entity.
func (_m *UserPushSetting) QueryUser() *UserQuery {
	return NewUserPushSettingClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this UserPushSetting.
// Note that you need to call UserPushSetting.Unwrap() before calling this method if this UserPushSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserPushSetting) Update() *UserPushSettingUpdateOne {
	return NewUserPushSettingClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserPushSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserPushSetting) Unwrap() *UserPushSetting {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPushSetting is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserPushSetting) String() string {
	var builder strings.Builder
	builder.WriteString("UserPushSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(fmt.Sprintf("%v", _m.Provider))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", _m.Enabled))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(_m.DeviceID)
	builder.WriteString(", ")
	builder.WriteString("device_name=")
	builder.WriteString(_m.DeviceName)
	builder.WriteString(", ")
	builder.WriteString("settings=")
	builder.WriteString(fmt.Sprintf("%v", _m.Settings))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserPushSettings is a parsable slice of UserPushSetting.
type UserPushSettings []*UserPushSetting
