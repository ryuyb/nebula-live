// Code generated by ent, DO NOT EDIT.

package rolepermission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rolepermission type in the database.
	Label = "role_permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// FieldPermissionID holds the string denoting the permission_id field in the database.
	FieldPermissionID = "permission_id"
	// FieldAssignedBy holds the string denoting the assigned_by field in the database.
	FieldAssignedBy = "assigned_by"
	// FieldAssignedAt holds the string denoting the assigned_at field in the database.
	FieldAssignedAt = "assigned_at"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// EdgePermission holds the string denoting the permission edge name in mutations.
	EdgePermission = "permission"
	// EdgeAssigner holds the string denoting the assigner edge name in mutations.
	EdgeAssigner = "assigner"
	// Table holds the table name of the rolepermission in the database.
	Table = "role_permissions"
	// RoleTable is the table that holds the role relation/edge.
	RoleTable = "role_permissions"
	// RoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleInverseTable = "roles"
	// RoleColumn is the table column denoting the role relation/edge.
	RoleColumn = "role_id"
	// PermissionTable is the table that holds the permission relation/edge.
	PermissionTable = "role_permissions"
	// PermissionInverseTable is the table name for the Permission entity.
	// It exists in this package in order to avoid circular dependency with the "permission" package.
	PermissionInverseTable = "permissions"
	// PermissionColumn is the table column denoting the permission relation/edge.
	PermissionColumn = "permission_id"
	// AssignerTable is the table that holds the assigner relation/edge.
	AssignerTable = "role_permissions"
	// AssignerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AssignerInverseTable = "users"
	// AssignerColumn is the table column denoting the assigner relation/edge.
	AssignerColumn = "assigned_by"
)

// Columns holds all SQL columns for rolepermission fields.
var Columns = []string{
	FieldID,
	FieldRoleID,
	FieldPermissionID,
	FieldAssignedBy,
	FieldAssignedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAssignedAt holds the default value on creation for the "assigned_at" field.
	DefaultAssignedAt func() time.Time
)

// OrderOption defines the ordering options for the RolePermission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRoleID orders the results by the role_id field.
func ByRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleID, opts...).ToFunc()
}

// ByPermissionID orders the results by the permission_id field.
func ByPermissionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermissionID, opts...).ToFunc()
}

// ByAssignedBy orders the results by the assigned_by field.
func ByAssignedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignedBy, opts...).ToFunc()
}

// ByAssignedAt orders the results by the assigned_at field.
func ByAssignedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignedAt, opts...).ToFunc()
}

// ByRoleField orders the results by role field.
func ByRoleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleStep(), sql.OrderByField(field, opts...))
	}
}

// ByPermissionField orders the results by permission field.
func ByPermissionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssignerField orders the results by assigner field.
func ByAssignerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignerStep(), sql.OrderByField(field, opts...))
	}
}
func newRoleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RoleTable, RoleColumn),
	)
}
func newPermissionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PermissionTable, PermissionColumn),
	)
}
func newAssignerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AssignerTable, AssignerColumn),
	)
}
